//UVA 10951
#include <iostream>
#include <vector>
using namespace std;
int n;

int pow_mod(int x,int _n,int mod) {
	int res=1;
	while(_n) {
		if(_n&1) res=res*x%mod;
		x=x*x%mod;
		_n>>=1;
	}
	return res;
}
vector<int> gcd(vector<int> a,vector<int> b) {
	if(b.size()==0) return a;
	int l=a.size()-b.size();
	for(int i=0;i<=l;i++) {
		int tmp=a[i]*pow_mod(b[0],n-2,n)%n;//according to Fermat's theorem,a^(n-2)%n is actually equals to the inversion of a
		for(int j=0;j<b.size();j++) {
			a[j+i]=(a[j+i]-tmp*b[j]%n+n)%n;
		}
	}
	int p=-1;
	for(int i=0;i<a.size();i++) {
		if(a[i]) {p=i;break;}
	}
	vector<int> c;
	if(p>=0) for(int i=p;i<a.size();i++) {
		c.push_back(a[i]);
	}
	return gcd(b,c);
}	
int main() {
	int kase=1;
	while(cin>>n,n) {
		int d1,d2;
		vector<int> a,b;
		cin>>d1;
		int x;
		for(int i=0;i<=d1;i++) {
			cin>>x,a.push_back(x);
		}
		cin>>d2;
		for(int i=0;i<=d2;i++) {
			cin>>x,b.push_back(x);
		}
		vector<int> ans=gcd(a,b);
		cout<<"Case "<<kase++<<": "<<ans.size()-1;
		int inv=pow_mod(ans[0],n-2,n);
		for(int i=0;i<ans.size();i++) {
			ans[i]=ans[i]*inv%n;
			cout<<' '<<ans[i];
		}
		cout<<endl;
	} 
	return 0;
}
